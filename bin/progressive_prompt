#!/usr/bin/ruby

require 'open3'
require 'fileutils'

class ProgressivePrompt
  DIR = '/tmp/progressive_prompt'
  REFRESH_INTERVAL = 1

  def initialize(args)
    @shell_pid, @exec_number, @placeholder, *@args = args
    @dir = Dir.pwd
    @shell_dir = "#{DIR}/#{@shell_pid}"
    @file = "#{@shell_dir}/#{@exec_number}"
  end

  def call
    if File.exist?(@file)
      puts File.read(@file)
    else
      launch_daemon
      puts @placeholder
    end
  end

  def has_contents?(contents)
    return false unless File.exist?(@file)
    File.read(@file) == contents
  end

  def update_prompt(contents, no_alarm: false)
    return if has_contents?(contents)
    FileUtils.mkdir_p(File.dirname(@file))
    File.write(@file, contents)
    Process.kill('ALRM', @shell_pid.to_i) unless no_alarm
  end

  def each_prompt
    return enum_for(__method__) unless block_given?
    Open3.popen3(*@args, @shell_pid, @exec_number, chdir: @dir) do |stdin, stdout, stderr, wait_thr|
      stdout.each_line("\0", chomp: true) { |prompt| yield prompt }
    end
  end

  def run_prompt(first_run:)
    if first_run
      update_prompt(@placeholder, no_alarm: true)
      each_prompt { |prompt| update_prompt(prompt) }
    else
      update_prompt(each_prompt.to_a.last)
    end
  end

  def launch_daemon
    Process.detach(fork do
      Process.daemon
      run_prompt(first_run: true)
      # cleanup!
      loop do
        sleep REFRESH_INTERVAL
        exit if newer_exec_exists?
        run_prompt(first_run: false)
      end
    end)
  end

  def newer_exec_exists?
    Dir.foreach(@shell_dir) do |f|
      next unless f.to_i.to_s == f
      return true if f.to_i > @exec_number.to_i
    end
    false
  end

  def cleanup!
    cleanup_old_exec
    cleanup_terminated_shells
  end

  def cleanup_old_exec
    Dir.foreach(@shell_dir) do |f|
      next unless f.to_i.to_s == f
      next unless f.to_i < exec_number.to_i
      File.unlink("#{@shell_dir}/#{f}")
    end
  end

  def cleanup_terminated_shells
    Dir.foreach(DIR) do |pid|
      FileUtils.rm_r("#{DIR}/#{pid}") unless alive?(pid)
    end
  end

  def alive?(pid)
    return false unless pid.to_i.to_s == pid
    Process.kill(0, pid.to_i)
    true
  rescue Errno::ESRCH
    false
  rescue Errno::EPERM
    true
  end
end

ProgressivePrompt.new(ARGV).call
