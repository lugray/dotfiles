#!/opt/rubies/latest/bin/ruby --disable-gems

def format(code, text)
  "%{\x1b[#{code}m%}#{text}%{\x1b[0m%}"
end

def italic(text)
  format(3, text)
end

def red(text)
  format(31, text)
end

def yellow(text)
  format(33, text)
end

def cyan(text)
  format(36, text)
end

def bold_green(text)
  format(92, text)
end

def bold_blue(text)
  format(94, text)
end

def bold_magenta(text)
  format(95, text)
end

def month
  Time.now.strftime("%m").to_i
end

def format_machine(machine)
  case month
  when 12
    bold_green(machine)
  else
    bold_blue(italic(machine))
  end
end

def format_path(path)
  case month
  when 12
    red(path)
  else
    cyan(path)
  end
end

def format_branch(branch)
  case month
  when 12
    bold_green(branch)
  else
    bold_magenta(branch)
  end
end

def success_emoji
  case month
  when 12
    ['🎄', '🎅', '🎁', '🤶', '⛄'][ARGV[1].to_i % 5]
  else
    '🐙'
  end
end

def failure_emoji
  case month
  when 12
    '🪨'
  else
    '🤬'
  end
end

def format_prefix(prefix)
  case month
  when 12
    red(prefix)
  else
    prefix
  end
end

def prompt(suffix = "")
  [
    "#{format_prefix('╭─')}#{format_machine('%m')} #{format_path('%~')}#{suffix}",
    "#{format_prefix('╰─')}%(?.%2{#{success_emoji}%}.#{red('[%?]')} %2{#{failure_emoji}%}) ",
  ].join("\n")
end

def print_prompt(suffix = "", final: false)
  print prompt(suffix)
  exit 0 if final

  print "\0"
  $stdout.flush
end

# def status(
#   branch: nil,
#   behind: nil,
#   ahead: nil,
#   staged: nil,
#   conflicts: nil,
#   changed: nil,
#   untracked: nil,
#   stashed: nil,
# )
#   status = " ["
# end

print_prompt

require 'open3'

branch, err, stat = Open3.capture3('git', 'symbolic-ref', '--short', 'HEAD')
if err.include?('fatal: not a git repository')
  print_prompt("", final: true)
end
branch.chomp!
print_prompt(" [#{format_branch(branch)} ...]")

changed_files = `git diff --name-status`.lines
staged_files = `git diff --staged --name-status`.lines
changed = changed_files.count { |l| !l.start_with?('U') }
conflicts = staged_files.count { |l| l.start_with?('U') }
staged = staged_files.length - conflicts
untracked = `git status --porcelain`.each_line.count { |l| l.start_with?('??') }
stashed = `git stash list`.each_line.count { |l| l.start_with?('stash@') }

ahead = behind = 0


if branch.empty?
  branch = ':' + `git rev-parse --short HEAD`.chomp
else
  remote_name = `git config branch.#{branch}.remote`.chomp
  merge_name = `git config branch.#{branch}.merge`.chomp
  remote_ref = if remote_name == '.' # local
    merge_name
  else
    remote_ref = "refs/remotes/#{remote_name}/#{merge_name[11..]}"
  end
  revlist = `git rev-list --left-right #{remote_ref}...HEAD`.lines
  ahead = revlist.count { |l| l.start_with?('>') }
  behind = revlist.length - ahead
end
status = " [#{format_branch(branch)}|"
if behind > 0
  status += "↓#{behind}"
end
if ahead > 0
  status += "↑#{ahead}"
end
if staged > 0
  status += "%2{🎭%}#{red(staged)}"
end
if conflicts > 0
  status += "%2{💥%}#{red(conflicts)}"
end
if changed > 0
  status += "%2{🚧%}#{yellow(changed)}"
end
if untracked > 0
  status += "%2{🆕%}#{cyan(untracked)}"
end
if stashed > 0
  status += "%2{📦%}#{yellow(stashed)}"
end
if staged + conflicts + changed + untracked == 0
  status += "#{bold_green('')}"
end
status += ']'

print prompt(status)
