#!/usr/bin/ruby --disable-gems

class Fund
  WANT = {
    "TDB900" => 30,
    "TDB902" => 30,
    "TDB909" => 10,
    "TDB911" => 30,
  }

  def initialize(file, ignore_less_than: nil)
    @file = file
    @ignore_less_than = ignore_less_than
    @table = File.read(file).split("\n").map { |l| l.split(",") }
    raise unless @table[7][7] == "Market Value"
    @cash = (@table.detect { |l| l[0] == "Cash" })[1].to_f
  end

  def to_s
    buy = to_buy
    buy_table = buy.map do |stock, val|
      "#{stock}: #{format('%<val>0.2f', val: val)}"
    end
    total = buy.values.inject(&:+)
    [@file, *buy_table, "Total: #{format('%<total>0.2f', total: total)}"].join("\n")
  end

  private

  def to_buy(want: WANT)
    want = normalize(want)

    have = want.keys.map do |stock|
      val = (@table.detect { |l| l[0] == stock })[7].to_f
      [stock, val]
    end.to_h

    total = have.values.inject(&:+) + @cash

    buy = want.map do |stock, frac|
      [stock, (total * frac - have[stock]).round(2)]
    end.to_h

    if @ignore_less_than && buy.values.any? { |v| v < @ignore_less_than }
      to_buy(want: want.reject { |k, _| buy[k] < @ignore_less_than })
    else
      buy
    end
  end

  def normalize(want)
    total_frac = want.values.sum
    want.transform_values do |frac|
      frac.to_f / total_frac
    end
  end
end

args = ARGV.dup
ignore_less_than = nil
if !!args.delete('--no-sell') || !!args.delete('-n')
  ignore_less_than = 0
elsif (i = args.index('-i'))
  raise 'wat' unless args.delete_at(i)
  raise 'wat' unless val = args.delete_at(i)
  ignore_less_than = val.to_f
end

puts(args.map do |file|
  Fund.new(file, ignore_less_than: ignore_less_than).to_s
end.join("\n\n"))
